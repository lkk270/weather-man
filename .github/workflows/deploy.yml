name: Deploy Weather Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create deployment package
        run: |
          # Debug: Show what files we're about to package
          echo "Current directory contents:"
          ls -la

          # Create fresh package directory
          rm -rf package
          mkdir -p package

          # Install dependencies
          pip install --no-cache-dir --platform manylinux2014_x86_64 --target ./package \
            --implementation cp --python-version 3.9 \
            --only-binary=:all: --upgrade --force-reinstall \
            -r requirements.prod.txt

          # Debug: Show installed packages
          echo "Installed packages:"
          ls -l ./package/

          # Clean up unnecessary files
          rm -rf package/*.dist-info package/*.pth

          # Copy source files
          cp -r core database providers migrations main.py alembic.ini ./package/

          # Debug: Show what we're about to zip
          echo "Files to be zipped:"
          ls -la ./package/

          # Create zip file
          cd package && zip -r ../deployment_package.zip . -x "*.pyc" "*.pyo" "test*" "tests*" "*__pycache__*"

          # Debug: Show final zip size
          cd .. && ls -lh deployment_package.zip

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init

      - name: Select Terraform Workspace
        run: |
          cd infrastructure
          terraform workspace select prod

      - name: Terraform Plan
        id: terraform_plan
        run: |
          cd infrastructure
          terraform plan -out=tfplan \
            -var="database_url=${{ secrets.DATABASE_URL }}" \
            -var="nws_observation_api_token=${{ secrets.NWS_OBSERVATION_API_TOKEN }}" \
            -var="alert_email=${{ secrets.ALERT_EMAIL }}" \
            -var="force_update_value=$(date '+%Y-%m-%dT%H:%M:%S')-$(git rev-parse --short HEAD)"
        continue-on-error: true

      - name: Check Terraform Plan Exit Code
        run: |
          if [ -s infrastructure/tfplan ]; then
            echo "Terraform plan succeeded with changes."
            echo "apply_plan=true" >> $GITHUB_ENV
          else
            echo "No changes detected or plan failed."
            echo "apply_plan=false" >> $GITHUB_ENV
          fi

      - name: Terraform Apply
        if: env.apply_plan == 'true'
        run: |
          cd infrastructure
          terraform apply -auto-approve tfplan
